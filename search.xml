<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[三天打渔，两天晒网]]></title>
    <url>%2F2018%2F08%2F28%2F%E4%B8%89%E5%A4%A9%E6%89%93%E6%B8%94%EF%BC%8C%E4%B8%A4%E5%A4%A9%E6%99%92%E7%BD%91%2F</url>
    <content type="text"><![CDATA[具体题目如下图所示： 这次我选择使用python来完成这个题目。 一.问题解决思路分析因为“==三天==打渔==两天==晒网”，所以周期为5天，要判断出指定的某天是打渔还是晒网，则首先需要计算出从2010年1月1日起至指定的某天总共有多少天，计算出来之后对5取余。这里分为两种情况： ① 0&lt;=余数 这个人这天在打渔 ② 2&lt;余数 这个人这天在晒网 二.问题解决步骤第一步： 计算出从2010年1月1日起至指定的某天总共有多少天 因为最近一直在学习pandas和numpy库，之前刚好有过将字符串转为时间格式的代码经验---使用pandas库的to_datetime()方法即可将固定格式的string类型转为datetime类型的变量。转换成datatime类型后，就可以直接对时间进行==减法==，这样即可得到想要的天数，代码如下： 12345678910import pandas as pddef day_number(date): """ 计算输入的时期距离起始日期的天数并且返回 """ # 使用to_datetime()方法设置起始时间 begin_date = pd.to_datetime('2010-1-1') # 这里将格式转化为datetime的时间格式 将两个时间直接做减法 结果就是两个时间所隔的天数 return (date-begin_date).days 第二步：判断这个人在指定时间是打渔还是晒网 判断的方法就是步骤一得到的天数对5进行取余，进而用取余的结果来判断。代码如下： 123456789def judge(number, date): """ 判断在这天这个人是在做什么的方法 """ # 如果隔的天数除5取余比3小说明这人在打渔 反之在晒网 if number % 5 &lt; 3: return "这天在打渔 --- " + date else: return "这天在晒网 --- " + date 第三步：完成提高要求 首先是将若干日期写入in.txt,用户可以选择自己输入若干个测试日期，我这里是将用户输入的日期放入列表中，然后用with-open-as以写的方式打开in.txt文件，将列表里的所有日期写入in.txt文件，一个日期占一行。代码如下： 123456789101112131415def write_file(): # 定义列表str_dates用来存储输入的若干个日期 str_dates = [] str_date = '' # 将用户输入的日期保存在列表str_dates中 while str_date != 'quit': str_date = input("请按照 年-月-日 的格式输入需要判定的日期(输入quit结束输入)：") # 输入 quit 表示终止输入 if str_date == 'quit': break str_dates.append(str_date+'\n') # 将用户输入的所有日期保存至 in.txt 文件中 with open('in.txt','w') as f_obj: for str in str_dates: f_obj.write(str) 接下来是从in.txt读取日期后进行判断，然后将判断结果存入out.txt文件中。同样这里我将日期从文件取出来之后放入列表中以便于接下来判断，判断就是直接调用我前面定义的方法judge()循环判断列表里的所有日期，将返回的结果直接存入out.txt文件中。代码如下： 123456789101112def output_file(): # 从 in.txt 读取日期并且做出判断 with open('in.txt','r') as f_obj: # 读取文件里的日期并且放入列表str_dates中 str_dates = f_obj.readlines() # 以写的方式打开out.txt文件 with open('out.txt', 'w') as f_obj: # 循环进行单个日期进行的步骤 for str_date in str_dates: date = pd.to_datetime(str_date) # 将判断结果写入out.txt f_obj.write(judge(day_number(date), str_date)) 第四步：编写main方法进行测试 由于我使用to_datetime()方法将字符串转为datetime格式，可以很好的判断输入字符串是否符合相应格式以及年月日正确，完成了基本要求和提高要求之后就可以编写main方法，根据不同情况调用前面编写的函数来进行测试。具体代码如下： 123我利用了pandas库中的to_datetime()方法 如果格式转化出现异常，则说明用户输入的字符串并非一个有效的时间字符串或者是输入的年月日不正确所以使用异常处理 若发生异常 则提示 输入的字符串并非一个有效的时间字符串 123456789101112131415161718192021if __name__ == '__main__': flag = input("请选择要实现的功能：\n 1.输入日期判断 2.利用txt文件测试\n") if int(flag) == 1: str_date = input("请按照 年-月-日 的格式输入需要判定的日期：") ''' 我这里判断输入的字符串格式是否正确 我利用了pandas库中的to_datetime()方法 如果格式转化出现异常，则说明用户输入的字符串并非一个有效的时间字符串 所以使用异常处理 若发生异常 则提示 输入的字符串并非一个有效的时间字符串 ''' try: date = pd.to_datetime(str_date) except: print("这不是一个有效的时间字符串！！") else: # 如果字符串输入正确则： # 调用判断的函数并传入所隔天数和输入的日期两个参数 打印出这个人在干什么 print(judge(day_number(date), str_date)) if int(flag) == 2: write_file() output_file() 主要测试截图如下： ————————————————————-文章结束，谢谢观看——————————————————————]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python3 split()方法]]></title>
    <url>%2F2018%2F07%2F26%2FPython3-spilt-%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Python3 split()语法：1str.split(str="", num=string.count(str)) split()方法可以通过自己指定的字符对字符串进行分割，并且可以指定分割次数参数： ①str –&gt; 自己指定用来分割字符串的字符 ②num –&gt; 指定分割次数这个方法返回值是一个包含分割后所有字符串的列表举例如下： 12345# encoding:utf-8str = "Hello,this is my Blog"print(str.split())print(str.split('i',1))print(str.split('s')) 输出结果为： [‘Hello,this’, ‘is’, ‘my’, ‘Blog’] [‘Hello,th’, ‘s is my Blog’] [‘Hello,thi’, ‘ i’, ‘ my Blog’]]]></content>
      <tags>
        <tag>Python3</tag>
        <tag>spilt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为Java程序添加背景音乐]]></title>
    <url>%2F2018%2F06%2F29%2F%E4%B8%BAjava%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%2F</url>
    <content type="text"><![CDATA[Jdk10中可使用下面的方法给程序播放音频在类中添加如下函数：123456789101112import java.io.File;import javafx.scene.media.AudioClip;public class MusicPlay &#123; public static void playMusic() &#123; AudioClip ac; ac = new AudioClip(new File("src\\com\\xust\\util\\hot.mp3").toURI().toString()); ac.play(); //开始播放 //ac.setCycleCount(1000); //设置循环次数 &#125;&#125; 想要播放音乐时，调用上面的函数就可以了，注意导入需要的包，可根据eclipse提示导入。 PS：支持mp3格式]]></content>
      <tags>
        <tag>Java</tag>
        <tag>AudioClip</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序-真是磨人的小妖精]]></title>
    <url>%2F2018%2F06%2F04%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E7%9C%9F%E6%98%AF%E7%A3%A8%E4%BA%BA%E7%9A%84%E5%B0%8F%E5%A6%96%E7%B2%BE%2F</url>
    <content type="text"><![CDATA[在微信小程序官方发布wx.getUserInfo接口调整之后,刚开始我还觉得那没有什么,问题不大But!!! 终于在我使用]]></content>
      <tags>
        <tag>WeApp</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3.6.4识别图片中的文字]]></title>
    <url>%2F2018%2F06%2F02%2Fpython3-6-4%E8%AF%86%E5%88%AB%E5%9B%BE%E7%89%87%E4%B8%AD%E7%9A%84%E6%96%87%E5%AD%97%2F</url>
    <content type="text"><![CDATA[我的python老师给我们布置了一个期末大作业,他说做出来了就有学分,像我们这种对学分虎视眈眈的人当然得尽力做出来啦.其实整个过程不算很难,代码也不难,下面把我的步骤写下来,并且就我遇到的问题及解决方案奉上:首先……上源码: # coding:utf-8 from PIL import Image import pytesseract text=pytesseract.image_to_string(Image.open(&quot;chi.png&quot;),lang=&apos;chi_sim&apos;) print(text) 怎么说,除去导包和输出的代码整个主体就只是一行代码嗯,没错就是这么easy!所以不要有太大压力跟着做吧 一. 安装pillow和pytesseract 这个不用多说,两行代码,进入cmd: pip install pillow pip install pytesseract安装成功后进入第二步 二. 安装tesseract-OCR为各位看官奉上连接下载地址下载密码:mtad下载之后安装.注意注意: 必须安装到默认地址!!!安装完之后将这个文件粘贴到/tesseract-OCR/tessdata/ 文件夹下 三. 修改路径找到python安装路径打开\Lib\site-package\tesseract 编辑pytesseract.py文件修改为自己的tesseract-OCR的安装路径 保存 ok! 四. 调试运行 复制刚开始的那段代码,找一张图片去试试看吧. 附上我的运行结果:]]></content>
      <tags>
        <tag>python</tag>
        <tag>OCR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读万卷书，行万里路，做万人迷。]]></title>
    <url>%2F2018%2F06%2F01%2F%E7%94%9F%E5%91%BD%E4%B8%8D%E8%AF%A5%E8%A2%AB%E6%B5%AA%E8%B4%B9%2F</url>
    <content type="text"><![CDATA[转自知乎作者：七粥链接：https://www.zhihu.com/question/273638849/answer/372241344来源：知乎 你学习一般，考上了现在的这所学校，成绩不算好，拿不到奖学金，上课不听讲，上自习不规律，考试靠突击，同学帮一把的话也能每科考到七八十分，但是与优秀总有很大距离。你家境一般，父母都是普通员工，你在这个城市的生活费是每月一千二，没事下下馆子，一个月添件衣服，想买台相机，咬咬牙才能买双自己喜欢的鞋。 你几乎没有特长，不会弹吉他，不会弹钢琴，不会跳舞，不会画画，想学摄影却不会使用图片处理软件，想上台演出却没信心，学校晚会比赛的时候，你经常是站在台下围观的人群里的一员，你与聚光灯环绕的舞台几乎绝缘。你长相一般，不算英俊或者不算美丽，身材不算臃肿但也没什么肌肉或者没什么曲线，平时只是稍稍打扮一下，看上去并不出众，只能算整洁，与人擦肩而过是对方不会多留意你一眼。你的感情也是一般，有时候会遇见自己心仪的那个人，但是总抓不住机会，眨眼间那个人就被其他人俘获，你就开始伤心、抱怨，但是几天之后又开始寻找新的心上人，就这样看着一个个心上人走过，直到你毕业，与其中任何一个都没有发展。总之，你没有什么特别的地方 ，就和周围的千万个普通人一样。 你不甘心拿不到奖学金，看见别人得奖学金的时候你会说那完全是突击的结果，于是你开始上自习，不过你只坚持了一星期。 你不甘心自己的父辈平平，于是你批评讽刺自己周围的“官二代”、“富二代”，立志要努力学习争取成功，也好让自己的孩子成为“富二代”，你的热情持续了一个星期。你不甘心自己什么特长都没有，于是你开始学弹吉他、买滑轮鞋、借来摄影方面的书籍，你对着镜子微笑着说：“你是最棒的。” 这份虚假的信心维持了一个星期。 你不甘心自己没有伴侣，你决心洗心革面重新做人，你删掉电脑里的偶像剧肥皂剧，你收拾起床上的懒人桌，把零食袋子统统扔掉，然后洗了个澡并且修饰了一下自己，你往发型上喷了啫喱水，好让自己看起来很精神，你怀揣着一本成功学的书决定出去走走，开始新的生活。这样的状态，你稀稀拉拉地坚持了一个星期。 一个星期之后，你还是和周围千万个人一样，你还是和一星期前的自己一样。 你逛网络论坛，看到了这样一句话：“二十岁是人生最美好的时光，不应该局限在学校里教室里，应该享受生活。” 于是你相信了，你觉得二十岁的你就应该“随心所欲”，享受“人生中最后的自由时光”；就应该“快乐地去恋爱”“风华正茂”“挥斥方遒”······ 现在的你，用着父母的血汗钱，用着名牌包、穿着名牌跑鞋、骑着捷安特山地车、用着佳能牌的相机和苹果牌的手机，还经常去星巴克喝喝咖啡体验一下小资情调······那么，请允许我猜测一下你的未来—— 在大四将要结束时，你考研落榜。你风风火火的参加校园招聘会，很多公司你都看不上，嫌他们不是体制内单位、平台窄、规模小，直到毕业，你还没有找到心仪的工作。你收拾好行李回到老家，父母让你试着参加各种招聘考试或者参加当地的应聘会，你不去，因为你觉得那些工作太简单了，不适合你，你应该去寻找更好的就业机会。可是，当你去那些你看得上的公司应聘时，你的竞争对手太多了，而且都不差，你表现平平，理所当然地被拒之门外······现在的你，也许还在上大学，也许和恋人恩恩爱爱，每天黏在一起，午饭晚饭一起去吃，晚自习后还会一起在操场散步。你们讨论起未来，最后的结论总是：不要想得太多，认真过好现在就好。 不幸运的话，几个月后，你们就分手了，你凄凄惨惨戚戚，反复问自己究竟哪里做错了；幸运的话，你们会一直恋爱到毕业，最终，你觉得自己不够优秀没能力去对方所在的城市读研或者工作，所以你们带着不舍和悔恨分手了。现实很残酷，至此，你信了。 现在的你喜欢刷微博，你会全力支持那些你赞同的观点，你会激励否定那些你反对的观点。你爱憎分明，看起来很有正义感。你觉得血气方刚的年轻人就应该敢于说出自己的心声。你可能从来不会去想一个问题：你的观点，来自哪里？其实，它们绝大部分来自网络，它们已经蚕食了你的判断力。 现在，我只想问你一个问题：二十岁的你，有什么资本。 你只是千千万万人中微不足道的一个人，少了你，地球还是一样会转。 我敢打赌，一定很久没人和你说过“吃得苦中苦，方为人上人”这句话了吧？ 你知道“责任”两个字是怎么写的吗? 当你谈论飞翔的时候，你是不是忘记了地心引力的存在？ 现在的你，如果还是放纵着自己的懒惰与幼稚，虚度着光阴，那么，你就虚度去吧。反正我已经过了二十岁的年纪，我还有未来，我得直奔向前了，不陪你了。再见！ ——摘选自华文《20岁无资本无未来》 好吧这段话有点长。 我每次偷懒的时候就会看，有人会很诧异，你也会偷懒?没错，我会。我也想躺在床上什么都不干，然后颓一天，靠外卖维持基本生命。这些，想想就好。有些人经常嘲笑那些埋头苦学的人，诸如此类——都上大学了还那么努力干嘛啊，死读书没有用的，我们要全面发展。。。等等哔哔哔然而讲这些话的人，大部分都是不学习整天抱着手机，自己什么都不行的人。之所以讲这样的话，最主要的目的是麻痹自己的同时顺便破坏一下别人的心情。我就是那种埋头苦读的人，认真学习，多读书。但是我也有很多好朋友，我们为之一起努力奋斗。我要我自己绝对，不是一个油腻的废物。我永远相信那句话，越努力越幸运。我是一个平凡的人，没有爹妈可以拼，我也不需要。我可以拼自己。大学到底是什么?大学之道在明明德，在亲民，在止于至善。我欣赏这些埋头苦读的人并且坚持成为这样的人。我心向之。得到的东西，只可意会不可言传。醍醐灌顶的话是有的，以“早睡早起”为例，无论读起来平淡无奇还是悚然一惊，都只能说明读者的价值，不能说明这番语言本身的价值。 读万卷书，行万里路，做万人迷。 『江水浸云影，鸿雁欲南飞。携壶结客何处？空翠渺烟霏。尘世难逢一笑，况有紫萸黄菊，堪插满头归。 风景今朝是，身世昔人非。酬佳节，须酩酊，莫相违。人生如寄，何事辛苦怨斜晖。无尽今来古往， 多少春花秋月，那更有危机。与问牛山客，何必独沾衣。』 生命本该如此。]]></content>
      <tags>
        <tag>感悟</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3.X连接sqlserver2008]]></title>
    <url>%2F2018%2F05%2F09%2Fpython3-X%E8%BF%9E%E6%8E%A5sqlserver2008%2F</url>
    <content type="text"><![CDATA[因为我们学校数据库教学用的是sqlserver2008版本所以我以python使用数据库用的是sqlserver 电脑重装系统了,sql server没了,太大了不想安装了 这个文章就不更了,有时间写MySQL吧]]></content>
      <tags>
        <tag>python3</tag>
        <tag>sqlserver</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习与数据挖掘中的相关术语]]></title>
    <url>%2F2018%2F05%2F09%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%AD%E7%9A%84%E7%9B%B8%E5%85%B3%E6%9C%AF%E8%AF%AD%2F</url>
    <content type="text"><![CDATA[转自：机器学习算法与Python学习 Basis(基础)： MSE(Mean Square Error 均方误差)， LMS(LeastMean Square 最小均方)， LSM(Least Square Methods 最小二乘法)， MLE(MaximumLikelihood Estimation最大似然估计)， QP(Quadratic Programming 二次规划)， CP(Conditional Probability条件概率)， JP(Joint Probability 联合概率)， MP(Marginal Probability边缘概率)， Bayesian Formula(贝叶斯公式)， L1 /L2Regularization(L1/L2正则，以及更多的，现在比较火的L2.5正则等)， GD(GradientDescent 梯度下降)， SGD(Stochastic Gradient Descent 随机梯度下降)， Eigenvalue(特征值)， Eigenvector(特征向量)， Common Distribution(常见分布)： 1.1.1 Discrete Distribution(离散型分布)： BernoulliDistribution/Binomial(贝努利分布/二项分布)， Negative BinomialDistribution(负二项分布)， MultinomialDistribution(多项式分布)， Geometric Distribution(几何分布)， HypergeometricDistribution(超几何分布)， Poisson Distribution (泊松分布)。 1.1.2 Continuous Distribution (连续型分布)： UniformDistribution(均匀分布)， Normal Distribution /Guassian Distribution(正态分布/高斯分布)， ExponentialDistribution(指数分布)， Lognormal Distribution(对数正态分布)， GammaDistribution(Gamma分布)， Beta Distribution(Beta分布)， Dirichlet Distribution(狄利克雷分布)， Rayleigh Distribution(瑞利分布)， Cauchy Distribution(柯西分布)， Weibull Distribution (韦伯分布)。 1.1.3 Three Sampling Distribution(三大抽样分布)： Chi-squareDistribution(卡方分布)， t-distribution(t-distribution)， F-distribution(F-分布)。 Data Pre-processing(数据预处理)： Missing Value Imputation(缺失值填充)， Discretization(离散化)，Mapping(映射)， Normalization(归一化/标准化)。 Sampling(采样)： Simple Random Sampling(简单随机采样)， OfflineSampling(离线等可能K采样)， Online Sampling(在线等可能K采样)， Ratio-based Sampling(等比例随机采样)， Acceptance-RejectionSampling(接受-拒绝采样)， Importance Sampling(重要性采样)， MCMC(MarkovChain Monte Carlo 马尔科夫蒙特卡罗采样算法：Metropolis-Hasting&amp; Gibbs)。 Clustering(聚类)： Spectral-KMeans(谱聚类)， GMM-EM(混合高斯模型-期望最大化算法解决)， K-Pototypes，CLARANS(基于划分)， BIRCH(基于层次)， CURE(基于层次)， DBSCAN(基于密度)， CLIQUE(基于密度和基于网格)。 Classification&amp;Regression(分类&amp;回归)： LR(Linear Regression 线性回归)， LR(LogisticRegression逻辑回归)， SR(Softmax Regression 多分类逻辑回归)， GLM(GeneralizedLinear Model 广义线性模型)， RR(Ridge Regression 岭回归/L2正则最小二乘回归)， LASSO(Least Absolute Shrinkage andSelectionator Operator L1正则最小二乘回归)， RF(随机森林)， DT(DecisionTree决策树)， GBDT(Gradient BoostingDecision Tree 梯度下降决策树)， CART(ClassificationAnd Regression Tree 分类回归树)， KNN(K-Nearest Neighbor K近邻)， SVM(Support VectorMachine)， KF(KernelFunction 核函数PolynomialKernel Function 多项式核函、 Guassian KernelFunction 高斯核函数/Radial BasisFunction RBF径向基函数、 String KernelFunction 字符串核函数)、 NB(Naive Bayes 朴素贝叶斯)，BN(Bayesian Network/Bayesian Belief Network/ Belief Network 贝叶斯网络/贝叶斯信度网络/信念网络)， LDA(Linear Discriminant Analysis/FisherLinear Discriminant 线性判别分析/Fisher线性判别)， EL(Ensemble Learning集成学习Boosting，Bagging，Stacking)， AdaBoost(Adaptive Boosting 自适应增强)， MEM(MaximumEntropy Model最大熵模型)。 Effectiveness Evaluation(分类效果评估)： Confusion Matrix(混淆矩阵)， Precision(精确度)，Recall(召回率)， Accuracy(准确率)，F-score(F得分)， ROC Curve(ROC曲线)，AUC(AUC面积)， LiftCurve(Lift曲线) ，KS Curve(KS曲线)。 PGM(Probabilistic Graphical Models概率图模型)： BN(Bayesian Network/Bayesian Belief Network/ BeliefNetwork 贝叶斯网络/贝叶斯信度网络/信念网络)， MC(Markov Chain 马尔科夫链)， HMM(HiddenMarkov Model 马尔科夫模型)， MEMM(Maximum Entropy Markov Model 最大熵马尔科夫模型)， CRF(ConditionalRandom Field 条件随机场)， MRF(MarkovRandom Field 马尔科夫随机场)。 NN(Neural Network神经网络)： ANN(Artificial Neural Network 人工神经网络)， BP(Error BackPropagation 误差反向传播)。 DeepLearning Auto-encoder(自动编码器)， SAE(Stacked Auto-encoders堆叠自动编码器， Sparse Auto-encoders稀疏自动编码器、 Denoising Auto-encoders去噪自动编码器、 Contractive Auto-encoders 收缩自动编码器)， RBM(RestrictedBoltzmann Machine 受限玻尔兹曼机)， DBN(Deep Belief Network 深度信念网络)， CNN(ConvolutionalNeural Network 卷积神经网络)， Word2Vec(词向量学习模型)。 DimensionalityReduction(降维)： LDA LinearDiscriminant Analysis/Fisher Linear Discriminant 线性判别分析/Fisher线性判别， PCA(Principal Component Analysis 主成分分析)， ICA(IndependentComponent Analysis 独立成分分析)， SVD(Singular Value Decomposition 奇异值分解)， FA(FactorAnalysis 因子分析法)。 Text Mining(文本挖掘)： VSM(Vector Space Model向量空间模型)， Word2Vec(词向量学习模型)， TF(Term Frequency词频)， TF-IDF(Term Frequency-Inverse DocumentFrequency 词频-逆向文档频率)， MI(MutualInformation 互信息)， ECE(Expected Cross Entropy 期望交叉熵)， QEMI(二次信息熵)， IG(InformationGain 信息增益)， IGR(Information Gain Ratio 信息增益率)， Gini(基尼系数)， x2 Statistic(x2统计量)， TEW(TextEvidence Weight文本证据权)， OR(Odds Ratio 优势率)， N-Gram Model， LSA(Latent Semantic Analysis 潜在语义分析)， PLSA(ProbabilisticLatent Semantic Analysis 基于概率的潜在语义分析)， LDA(Latent DirichletAllocation 潜在狄利克雷模型)。 Association Mining(关联挖掘)： Apriori， FP-growth(Frequency Pattern Tree Growth 频繁模式树生长算法)， AprioriAll， Spade。 Recommendation Engine(推荐引擎)： DBR(Demographic-based Recommendation 基于人口统计学的推荐)， CBR(Context-basedRecommendation 基于内容的推荐)， CF(Collaborative Filtering协同过滤)， UCF(User-basedCollaborative Filtering Recommendation 基于用户的协同过滤推荐)， ICF(Item-basedCollaborative Filtering Recommendation 基于项目的协同过滤推荐)。 Similarity Measure&amp;Distance Measure(相似性与距离度量)： Euclidean Distance(欧式距离)， ManhattanDistance(曼哈顿距离)， Chebyshev Distance(切比雪夫距离)， MinkowskiDistance(闵可夫斯基距离)， Standardized Euclidean Distance(标准化欧氏距离)， MahalanobisDistance(马氏距离)， Cos(Cosine 余弦)， HammingDistance/Edit Distance(汉明距离/编辑距离)， JaccardDistance(杰卡德距离)， Correlation Coefficient Distance(相关系数距离)， InformationEntropy(信息熵)， KL(Kullback-Leibler Divergence KL散度/Relative Entropy 相对熵)。 Optimization(最优化)： 2.6.1 Non-constrainedOptimization(无约束优化)： Cyclic VariableMethods(变量轮换法)， Pattern Search Methods(模式搜索法)， VariableSimplex Methods(可变单纯形法)， Gradient Descent Methods(梯度下降法)， Newton Methods(牛顿法)， Quasi-NewtonMethods(拟牛顿法)， Conjugate Gradient Methods(共轭梯度法)。 2.6.2 ConstrainedOptimization(有约束优化)： Approximation Programming Methods(近似规划法)， FeasibleDirection Methods(可行方向法)， Penalty Function Methods(罚函数法)， Multiplier Methods(乘子法)。 Heuristic Algorithm(启发式算法)， SA(SimulatedAnnealing， 模拟退火算法)， GA(genetic algorithm遗传算法)。 Feature Selection(特征选择算法)： Mutual Information(互信息)， DocumentFrequence(文档频率)， Information Gain(信息增益)， Chi-squared Test(卡方检验)， Gini(基尼系数)。 Outlier Detection(异常点检测算法)： Statistic-based(基于统计)， Distance-based(基于距离)， Density-based(基于密度)， Clustering-based(基于聚类)。 Learning to Rank(基于学习的排序)： Pointwise：McRank； Pairwise：RankingSVM，RankNet，Frank，RankBoost； Listwise：AdaRank，SoftRank，LamdaMART。 Tool(工具)： MPI，Hadoop生态圈，Spark，BSP，Weka，Mahout，Scikit-learn，PyBrain… 以及一些具体的业务场景与case等。]]></content>
      <tags>
        <tag>python</tag>
        <tag>机器学习</tag>
        <tag>数据挖掘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3安装pymssql库时遇到的问题及解决方法]]></title>
    <url>%2F2018%2F05%2F05%2Fpython3%E5%AE%89%E8%A3%85pymssql%E5%BA%93%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[今天在安装pymssql时出现了error:Microsoft Visual C++ 14.0 is required我的电脑里的确没有vc++14.0这里提一下解决方法：1.首先访问点击这里,手动找到对应自己python版本的pymssql(cp后面是python版本) 我的python版本是3.6 AMD64 所以我下载图中红圈的那个 2.在cmd里执行：我下载的在E盘中pip install E:\pymssql-2.1.4.dev5-cp36-cp36m-win_amd64.whl OK successful！！！]]></content>
      <tags>
        <tag>python</tag>
        <tag>pymssql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DDCTF 掀桌子题Write up]]></title>
    <url>%2F2018%2F05%2F02%2FDDCTF-%E6%8E%80%E6%A1%8C%E5%AD%90%E9%A2%98Write-up%2F</url>
    <content type="text"><![CDATA[作为一个CTF新手，第一次写write up还是有些惶恐的 这个题的题目是一个颜文字，然而…解决整个题的过程跟颜文字一点关系都没有。 刺不刺激，惊不惊喜 这个题的整体思路就是进制转换，先将16进制转换为10进制，再对128求余，剩下的结果转换为字符。 先仔细观察这个字符串的特点“d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9e1e6b3e3b9e4b3b7b7e2b6b1e4b2b6b9e2b1b1b3b3b7e6b3b3b0e3b9b3b5e6fd”会发现字母最大就是f 是16进制没跑了 16进制一般是两个字符组成一个字节，拆解，转换成十进制之后会发现超出ASCII码范围，ASCII有0-127，所以脑洞大开 对128取余，之后再转换成字符。Bingo！！ 下面上代码： #coding:utf-8 import re import urllib list1=[] list2=[] s = &quot;d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4 b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd&quot; print len(s) result=re.sub(r&quot;(?&lt;=\w)(?=(?:\w\w)+$)&quot;,&quot; &quot;, s) print result urlencode_s=&quot;%&quot;+result.replace(&quot; &quot;,&quot;%&quot;) print urlencode_s hex_s = &quot;0x&quot;+result.replace(&quot; &quot;,&quot;0x&quot;) print hex_s print hex_s[-4:8] list_hex = [] for i in range(len(hex_s)): if((i+1)%4==0): print hex_s[(i-3):(i+1)] list1.append(hex_s[(i-3):(i+1)]) print i else: print i continue print list1 for i in list1: list2.append(int(i,16)) print list2 list3=[] for i in range(len(list2)): list3.append(chr(int(list2[i])-128)) s = &quot;&quot;.join(list3) print s PS：第一次参加CTF比赛，只做出来一道题。。。作为353名中的一份子我可能是最菜的 表情包奉上]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>write up</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[域名重定向中的遇到的一些问题]]></title>
    <url>%2F2018%2F04%2F29%2F%E5%9F%9F%E5%90%8D%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%AD%E7%9A%84%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[很多人在解析自己的域名时都会遇到各种各样的问题，我在解析的时候就是跟着网上的例子一步一步来，诶，别人都能成功，我怎么也搞不成功，我这里遇到的问题是：server hold 域名在server hold状态下是无法解析成功的，且添加解析的时候不会给你提示，这个时候就需要自己去查询了，点击下面链接查询：whois万网查询输入自己的域名查看信息，如果是处于server hold状态，我目前知道有两种可能： 1.域名没有实名认证 2.域名认证信息与身份证上信息不一致 没有实名认证的话就去实名认证一下，不过信息一定要和身份证上信息一致，不然虽然认证会成功，也有可能是server hold状态。 第2种情况可以通过域名服务–批量操作–批量过户至已经实名认证通过的信息模板去重新修改认证信息。重新认证信息无误成功后，通常情况注册局会在1-2个工作日恢复解析，建议耐心等待1-2个工作日之后再刷新查看域名状态。 我可是等了整整2天呐…┓(;´_｀)┏ 心累~~~]]></content>
      <tags>
        <tag>域名重定向</tag>
        <tag>域名解析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客]]></title>
    <url>%2F2018%2F04%2F27%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[给大家分享一首歌曲]]></content>
      <tags>
        <tag>learning</tag>
        <tag>why not?</tag>
      </tags>
  </entry>
</search>
